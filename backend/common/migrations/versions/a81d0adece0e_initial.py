"""Initial

Revision ID: a81d0adece0e
Revises:
Create Date: 2020-04-01 08:45:26.058466

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a81d0adece0e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authentication_directory',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('verbose_name', sa.Unicode(length=255), nullable=True),
                    sa.Column('connection_type', sa.Enum('LDAP', name='connectiontypes'), server_default='LDAP',
                              nullable=False),
                    sa.Column('description', sa.Unicode(length=255), nullable=True),
                    sa.Column('directory_url', sa.Unicode(length=255), nullable=True),
                    sa.Column('directory_type', sa.Enum('ActiveDirectory', name='directorytypes'),
                              server_default='ActiveDirectory', nullable=False),
                    sa.Column('domain_name', sa.Unicode(length=255), nullable=True),
                    sa.Column('subdomain_name', sa.Unicode(length=255), nullable=True),
                    sa.Column('service_username', sa.Unicode(length=150), nullable=True),
                    sa.Column('service_password', sa.Unicode(length=128), nullable=True),
                    sa.Column('admin_server', sa.Unicode(length=255), nullable=True),
                    sa.Column('kdc_urls', postgresql.ARRAY(sa.Unicode(length=255)), nullable=True),
                    sa.Column('sso', sa.Boolean(), nullable=True),
                    sa.Column('status',
                              sa.Enum('CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'SERVICE', 'PARTIAL', 'BAD_AUTH',
                                      name='status'), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('domain_name'),
                    sa.UniqueConstraint('verbose_name')
                    )
    op.create_index(op.f('ix_authentication_directory_status'), 'authentication_directory', ['status'], unique=False)
    op.create_table('controller',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('verbose_name', sa.Unicode(length=128), nullable=False),
                    sa.Column('status',
                              sa.Enum('CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'SERVICE', 'PARTIAL', 'BAD_AUTH',
                                      name='status'), nullable=False),
                    sa.Column('address', sa.Unicode(length=15), nullable=False),
                    sa.Column('description', sa.Unicode(length=256), nullable=True),
                    sa.Column('version', sa.Unicode(length=128), nullable=True),
                    sa.Column('username', sa.Unicode(length=128), nullable=False),
                    sa.Column('password', sa.Unicode(length=128), nullable=False),
                    sa.Column('ldap_connection', sa.Boolean(), nullable=False),
                    sa.Column('token', sa.Unicode(length=1024), nullable=True),
                    sa.Column('expires_on', sa.DateTime(timezone=True), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('address'),
                    sa.UniqueConstraint('verbose_name')
                    )
    op.create_index(op.f('ix_controller_status'), 'controller', ['status'], unique=False)
    op.create_table('entity',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('entity_type',
                              sa.Enum('CONTROLLER', 'SECURITY', 'POOL', 'SYSTEM', 'VM', 'USER', 'GROUP', 'AUTH',
                                      name='entitytype'), nullable=False),
                    sa.Column('entity_uuid', postgresql.UUID(), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ix_entity_entity_object_entity_type', 'entity', ['entity_uuid', 'entity_type'], unique=True)
    op.create_index(op.f('ix_entity_entity_type'), 'entity', ['entity_type'], unique=False)
    op.create_index(op.f('ix_entity_entity_uuid'), 'entity', ['entity_uuid'], unique=False)
    op.create_table('event',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('event_type', sa.Integer(), nullable=False),
                    sa.Column('message', sa.Unicode(length=256), nullable=False),
                    sa.Column('description', sa.Unicode(), nullable=True),
                    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
                    sa.Column('user', sa.Unicode(length=128), nullable=True),
                    sa.Column('entity_id', postgresql.UUID(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], ),
                    )
    op.create_table('group',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('verbose_name', sa.Unicode(length=128), nullable=False),
                    sa.Column('description', sa.Unicode(length=255), nullable=True),
                    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('now()'),
                              nullable=True),
                    sa.Column('date_updated', sa.DateTime(timezone=True), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('verbose_name')
                    )
    op.create_table('mapping',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('verbose_name', sa.Unicode(length=128), nullable=False),
                    sa.Column('description', sa.Unicode(length=255), nullable=True),
                    sa.Column('value_type', sa.Enum('USER', 'OU', 'GROUP', name='valuetypes'), nullable=False),
                    sa.Column('values', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
                    sa.Column('priority', sa.Integer(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('verbose_name')
                    )
    op.create_index(op.f('ix_mapping_value_type'), 'mapping', ['value_type'], unique=False)
    op.create_table('user',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('username', sa.Unicode(length=128), nullable=False),
                    sa.Column('password', sa.Unicode(length=128), nullable=False),
                    sa.Column('email', sa.Unicode(length=256), nullable=True),
                    sa.Column('last_name', sa.Unicode(length=128), nullable=True),
                    sa.Column('first_name', sa.Unicode(length=32), nullable=True),
                    sa.Column('date_joined', sa.DateTime(timezone=True), server_default=sa.text('now()'),
                              nullable=True),
                    sa.Column('date_updated', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('last_login', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
                    sa.Column('is_superuser', sa.Boolean(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('username')
                    )
    op.create_table('entity_role_owner',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('entity_id', postgresql.UUID(), nullable=True),
                    sa.Column('role',
                              sa.Enum('READ_ONLY', 'ADMINISTRATOR', 'SECURITY_ADMINISTRATOR', 'VM_ADMINISTRATOR',
                                      'NETWORK_ADMINISTRATOR', 'STORAGE_ADMINISTRATOR', 'VM_OPERATOR', name='role'),
                              nullable=True),
                    sa.Column('user_id', postgresql.UUID(), nullable=True),
                    sa.Column('group_id', postgresql.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ix_entity_role_owner_entity_role_group', 'entity_role_owner', ['entity_id', 'role', 'group_id'], unique=True)
    op.create_index('ix_entity_role_owner_entity_role_owner', 'entity_role_owner', ['entity_id', 'role', 'group_id', 'user_id'], unique=True)
    op.create_index('ix_entity_role_owner_entity_role_user', 'entity_role_owner', ['entity_id', 'role', 'user_id'], unique=True)
    op.create_index(op.f('ix_entity_role_owner_role'), 'entity_role_owner', ['role'], unique=False)
    op.create_table('event_entities',
                    sa.Column('event_id', postgresql.UUID(), nullable=False),
                    sa.Column('entity_id', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], ),
                    sa.ForeignKeyConstraint(['event_id'], ['event.id'], )
                    )
    op.create_table('event_read_by_user',
                    sa.Column('event', postgresql.UUID(), nullable=False),
                    sa.Column('user', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['event'], ['event.id'], ),
                    sa.ForeignKeyConstraint(['user'], ['user.id'], )
                    )
    op.create_table('group_authentication_directory_mappings',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('authentication_directory_id', postgresql.UUID(), nullable=False),
                    sa.Column('group_id', postgresql.UUID(), nullable=False),
                    sa.Column('mapping_id', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['authentication_directory_id'], ['authentication_directory.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['mapping_id'], ['mapping.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ix_group_auth_mapping', 'group_authentication_directory_mappings', ['authentication_directory_id', 'group_id', 'mapping_id'], unique=True)
    op.create_table('group_role',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('role',
                              sa.Enum('READ_ONLY', 'ADMINISTRATOR', 'SECURITY_ADMINISTRATOR', 'VM_ADMINISTRATOR',
                                      'NETWORK_ADMINISTRATOR', 'STORAGE_ADMINISTRATOR', 'VM_OPERATOR', name='role'),
                              nullable=False),
                    sa.Column('group_id', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_group_role_role'), 'group_role', ['role'], unique=False)
    op.create_index('ix_group_roles_group_roles', 'group_role', ['role', 'group_id'], unique=True)
    op.create_table('pool',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('verbose_name', sa.Unicode(length=128), nullable=False),
                    sa.Column('cluster_id', postgresql.UUID(), nullable=False),
                    sa.Column('node_id', postgresql.UUID(), nullable=False),
                    sa.Column('datapool_id', postgresql.UUID(), nullable=True),
                    sa.Column('status',
                              sa.Enum('CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'SERVICE', 'PARTIAL', 'BAD_AUTH',
                                      name='status'), nullable=False),
                    sa.Column('controller', postgresql.UUID(), nullable=False),
                    sa.Column('keep_vms_on', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['controller'], ['controller.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('verbose_name')
                    )
    op.create_index(op.f('ix_pool_status'), 'pool', ['status'], unique=False)
    op.create_table('user_groups',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.Column('group_id', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ix_user_in_group', 'user_groups', ['user_id', 'group_id'], unique=True)
    op.create_table('user_jwtinfo',
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.Column('token', sa.Unicode(), nullable=False),
                    sa.Column('last_changed', sa.DateTime(timezone=True), server_default=sa.text('now()'),
                              nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id')
                    )
    op.create_index(op.f('ix_user_jwtinfo_token'), 'user_jwtinfo', ['token'], unique=False)
    op.create_table('user_role',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('role',
                              sa.Enum('READ_ONLY', 'ADMINISTRATOR', 'SECURITY_ADMINISTRATOR', 'VM_ADMINISTRATOR',
                                      'NETWORK_ADMINISTRATOR', 'STORAGE_ADMINISTRATOR', 'VM_OPERATOR', name='role'),
                              nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_user_role_role'), 'user_role', ['role'], unique=False)
    op.create_index('ix_user_roles_user_roles', 'user_role', ['role', 'user_id'], unique=True)
    op.create_table('automated_pool',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('template_id', postgresql.UUID(), nullable=False),
                    sa.Column('min_size', sa.Integer(), nullable=False),
                    sa.Column('max_size', sa.Integer(), nullable=False),
                    sa.Column('max_vm_amount', sa.Integer(), nullable=False),
                    sa.Column('increase_step', sa.Integer(), nullable=False),
                    sa.Column('min_free_vms_amount', sa.Integer(), nullable=False),
                    sa.Column('max_amount_of_create_attempts', sa.Integer(), nullable=False),
                    sa.Column('initial_size', sa.Integer(), nullable=False),
                    sa.Column('reserve_size', sa.Integer(), nullable=False),
                    sa.Column('total_size', sa.Integer(), nullable=False),
                    sa.Column('vm_name_template', sa.Unicode(length=100), nullable=True),
                    sa.Column('os_type', sa.Unicode(length=100), nullable=True),
                    sa.Column('create_thin_clones', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['id'], ['pool.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('static_pool',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(['id'], ['pool.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('vm',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('verbose_name', sa.Unicode(length=255), nullable=False),
                    sa.Column('pool_id', postgresql.UUID(), nullable=True),
                    sa.Column('template_id', sa.Unicode(length=100), nullable=True),
                    sa.Column('created_by_vdi', sa.Boolean(), nullable=False),
                    sa.Column('broken', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['pool_id'], ['pool.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('vm')
    op.drop_table('static_pool')
    op.drop_table('automated_pool')
    op.drop_index('ix_user_roles_user_roles', table_name='user_role')
    op.drop_index(op.f('ix_user_role_role'), table_name='user_role')
    op.drop_table('user_role')
    op.drop_index(op.f('ix_user_jwtinfo_token'), table_name='user_jwtinfo')
    op.drop_table('user_jwtinfo')
    op.drop_index('ix_user_in_group', table_name='user_groups')
    op.drop_table('user_groups')
    op.drop_index(op.f('ix_pool_status'), table_name='pool')
    op.drop_table('pool')
    op.drop_index('ix_group_roles_group_roles', table_name='group_role')
    op.drop_index(op.f('ix_group_role_role'), table_name='group_role')
    op.drop_table('group_role')
    op.drop_index('ix_group_auth_mapping', table_name='group_authentication_directory_mappings')
    op.drop_table('group_authentication_directory_mappings')
    op.drop_table('event_read_by_user')
    op.drop_table('event_entities')
    op.drop_index(op.f('ix_entity_role_owner_role'), table_name='entity_role_owner')
    op.drop_index('ix_entity_role_owner_entity_role_user', table_name='entity_role_owner')
    op.drop_index('ix_entity_role_owner_entity_role_owner', table_name='entity_role_owner')
    op.drop_index('ix_entity_role_owner_entity_role_group', table_name='entity_role_owner')
    op.drop_table('entity_role_owner')
    op.drop_table('user')
    op.drop_index(op.f('ix_mapping_value_type'), table_name='mapping')
    op.drop_table('mapping')
    op.drop_table('group')
    op.drop_table('event')
    op.drop_index(op.f('ix_entity_entity_uuid'), table_name='entity')
    op.drop_index(op.f('ix_entity_entity_type'), table_name='entity')
    op.drop_index('ix_entity_entity_object_entity_type', table_name='entity')
    op.drop_table('entity')
    op.drop_index(op.f('ix_controller_status'), table_name='controller')
    op.drop_table('controller')
    op.drop_index(op.f('ix_authentication_directory_status'), table_name='authentication_directory')
    op.drop_table('authentication_directory')
    # ### end Alembic commands ###
