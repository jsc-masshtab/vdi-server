"""Initial_4.0.

Revision ID: b58c521ba8d3
Revises:
Create Date: 2022-01-19 12:12:35.153423

"""
from alembic import op

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b58c521ba8d3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "active_tk_connection",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column("veil_connect_version", sa.Unicode(length=128), nullable=True),
        sa.Column("tk_ip", sa.Unicode(length=128), nullable=True),
        sa.Column("tk_os", sa.Unicode(length=128), nullable=True),
        sa.Column(
            "connected",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "data_received",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_interaction", sa.DateTime(timezone=True), nullable=True),
        sa.Column("disconnected", sa.DateTime(timezone=True), nullable=True),
        sa.Column("hostname", sa.Unicode(length=128), nullable=True),
        sa.Column("mac_address", sa.Unicode(length=128), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "authentication_directory",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("verbose_name", sa.Unicode(length=255), nullable=True),
        sa.Column(
            "connection_type",
            sa.Enum("LDAP", name="connectiontypes"),
            server_default="LDAP",
            nullable=False,
        ),
        sa.Column("description", sa.Unicode(length=255), nullable=True),
        sa.Column("directory_url", sa.Unicode(length=255), nullable=True),
        sa.Column(
            "directory_type",
            sa.Enum("ActiveDirectory",
                    "FreeIPA",
                    "OpenLDAP",
                    "ALD",
                    name="directorytypes"),
            server_default="ActiveDirectory",
            nullable=False,
        ),
        sa.Column("domain_name", sa.Unicode(length=255), nullable=True),
        sa.Column("dc_str", sa.Unicode(length=255), nullable=True),
        sa.Column("service_username", sa.Unicode(length=150), nullable=True),
        sa.Column("service_password", sa.Unicode(length=1000), nullable=True),
        sa.Column("sso", sa.Boolean(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "CREATING",
                "ACTIVE",
                "FAILED",
                "DELETING",
                "SERVICE",
                "PARTIAL",
                "BAD_AUTH",
                "RESERVED",
                name="status",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("dc_str"),
        sa.UniqueConstraint("domain_name"),
        sa.UniqueConstraint("verbose_name"),
    )
    op.create_index(
        op.f("ix_authentication_directory_status"),
        "authentication_directory",
        ["status"],
        unique=False,
    )
    op.create_table(
        "controller",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("verbose_name", sa.Unicode(length=128), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "CREATING",
                "ACTIVE",
                "FAILED",
                "DELETING",
                "SERVICE",
                "PARTIAL",
                "BAD_AUTH",
                "RESERVED",
                name="status",
            ),
            nullable=False,
        ),
        sa.Column("address", sa.Unicode(length=15), nullable=False),
        sa.Column("description", sa.Unicode(length=256), nullable=True),
        sa.Column("version", sa.Unicode(length=128), nullable=True),
        sa.Column("token", sa.Unicode(length=2048), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("verbose_name"),
    )
    op.create_index(
        op.f("ix_controller_address"), "controller", ["address"], unique=True
    )
    op.create_index(
        op.f("ix_controller_status"), "controller", ["status"], unique=False
    )
    op.create_table(
        "entity",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column(
            "entity_type",
            sa.Enum(
                "CONTROLLER",
                "SECURITY",
                "POOL",
                "SYSTEM",
                "VM",
                "USER",
                "GROUP",
                "AUTH",
                name="entitytype",
            ),
            nullable=False,
        ),
        sa.Column("entity_uuid", postgresql.UUID(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_entity_entity_object_entity_type",
        "entity",
        ["entity_uuid", "entity_type"],
        unique=True,
    )
    op.create_index(
        op.f("ix_entity_entity_type"), "entity", ["entity_type"], unique=False
    )
    op.create_index(
        op.f("ix_entity_entity_uuid"), "entity", ["entity_uuid"], unique=False
    )
    op.create_table(
        "group",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("verbose_name", sa.Unicode(length=128), nullable=False),
        sa.Column("description", sa.Unicode(length=255), nullable=True),
        sa.Column(
            "date_created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("date_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("ad_guid", sa.Unicode(length=36), nullable=True),
        sa.Column("ad_cn", sa.Unicode(length=1000), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("ad_cn"),
        sa.UniqueConstraint("ad_guid"),
        sa.UniqueConstraint("verbose_name"),
    )
    op.create_table(
        "journal_settings",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("interval", sa.Unicode(length=128), nullable=False),
        sa.Column("period", sa.Unicode(length=128), nullable=False),
        sa.Column("form", sa.Unicode(length=128), nullable=False),
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.Column("by_count", sa.Boolean(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("dir_path", sa.Unicode(length=128), nullable=False),
        sa.Column("ru_msg_str", sa.Unicode(length=128), nullable=True),
        sa.Column("ru_name_str", sa.Unicode(length=128), nullable=True),
        sa.Column("ru_path_str", sa.Unicode(length=128), nullable=True),
        sa.Column("en_msg_str", sa.Unicode(length=128), nullable=True),
        sa.Column("en_name_str", sa.Unicode(length=128), nullable=True),
        sa.Column("en_path_str", sa.Unicode(length=128), nullable=True),
        sa.Column("create_date", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "mapping",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("verbose_name", sa.Unicode(length=128), nullable=False),
        sa.Column("description", sa.Unicode(length=255), nullable=True),
        sa.Column(
            "value_type",
            sa.Enum("USER", "OU", "GROUP", name="valuetypes"),
            nullable=False,
        ),
        sa.Column("values", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("verbose_name"),
    )
    op.create_index(
        op.f("ix_mapping_value_type"), "mapping", ["value_type"], unique=False
    )
    op.create_table(
        "task",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("entity_id", postgresql.UUID(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "INITIAL",
                "IN_PROGRESS",
                "FAILED",
                "CANCELLED",
                "FINISHED",
                name="taskstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "task_type",
            sa.Unicode(length=256),
            nullable=False,
        ),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("started", sa.DateTime(timezone=True), nullable=True),
        sa.Column("finished", sa.DateTime(timezone=True), nullable=True),
        sa.Column("resumable", sa.Boolean(), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("progress", sa.Integer(), nullable=False),
        sa.Column("message", sa.Unicode(length=256), nullable=True),
        sa.Column("creator", sa.Unicode(length=128), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_status"), "task", ["status"], unique=False)
    op.create_index(op.f("ix_task_task_type"), "task", ["task_type"], unique=False)
    op.create_table(
        "user",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("username", sa.Unicode(length=128), nullable=False),
        sa.Column("password", sa.Unicode(length=128), nullable=False),
        sa.Column("local_password", sa.Boolean(), nullable=False),
        sa.Column("email", sa.Unicode(length=256), nullable=True),
        sa.Column("last_name", sa.Unicode(length=128), nullable=True),
        sa.Column("first_name", sa.Unicode(length=32), nullable=True),
        sa.Column("by_ad", sa.Boolean(), nullable=False),
        sa.Column(
            "date_joined",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("date_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "last_login",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.Column("two_factor", sa.Boolean(), nullable=False),
        sa.Column("secret", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "entity_owner",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("entity_id", postgresql.UUID(), nullable=True),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column("group_id", postgresql.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["entity_id"], ["entity.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_entity_owner_entity_group",
        "entity_owner",
        ["entity_id", "group_id"],
        unique=True,
    )
    op.create_index(
        "ix_entity_owner_entity_owner",
        "entity_owner",
        ["entity_id", "group_id", "user_id"],
        unique=True,
    )
    op.create_index(
        "ix_entity_owner_entity_user",
        "entity_owner",
        ["entity_id", "user_id"],
        unique=True,
    )
    op.create_table(
        "event",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("event_type", sa.Integer(), nullable=False),
        sa.Column("message", sa.Unicode(length=256), nullable=False),
        sa.Column("description", sa.Unicode(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("user", sa.Unicode(length=128), nullable=True),
        sa.Column("entity_id", postgresql.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["entity_id"], ["entity.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "group_authentication_directory_mappings",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("authentication_directory_id", postgresql.UUID(), nullable=False),
        sa.Column("group_id", postgresql.UUID(), nullable=False),
        sa.Column("mapping_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["authentication_directory_id"],
            ["authentication_directory.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["mapping_id"], ["mapping.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_group_auth_mapping",
        "group_authentication_directory_mappings",
        ["authentication_directory_id", "group_id", "mapping_id"],
        unique=True,
    )
    op.create_table(
        "group_role",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("SECURITY_ADMINISTRATOR", "OPERATOR", "ADMINISTRATOR", name="role"),
            nullable=False,
        ),
        sa.Column("group_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_group_role_role"), "group_role", ["role"], unique=False)
    op.create_index(
        "ix_group_roles_group_roles", "group_role", ["role", "group_id"], unique=True
    )
    op.create_table(
        "group_tk_permission",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column(
            "permission",
            sa.Enum(
                "USB_REDIR",
                "FOLDERS_REDIR",
                "SHARED_CLIPBOARD_CLIENT_TO_GUEST",
                "SHARED_CLIPBOARD_GUEST_TO_CLIENT",
                name="tkpermission"
            ),
            nullable=False,
        ),
        sa.Column("group_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "permission", "group_id", name="permission_group_id_unique_constraint"
        ),
    )
    op.create_index(
        op.f("ix_group_tk_permission_permission"),
        "group_tk_permission",
        ["permission"],
        unique=False,
    )
    op.create_table(
        "pool",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("verbose_name", sa.Unicode(length=128), nullable=False),
        sa.Column("resource_pool_id", postgresql.UUID(), nullable=True),
        sa.Column("datapool_id", postgresql.UUID(), nullable=True),
        sa.Column(
            "pool_type",
            sa.Enum(
                "AUTOMATED",
                "STATIC",
                "GUEST",
                "RDS",
                name="pooltypes"),
            nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "CREATING",
                "ACTIVE",
                "FAILED",
                "DELETING",
                "SERVICE",
                "PARTIAL",
                "BAD_AUTH",
                "RESERVED",
                name="status",
            ),
            nullable=False,
        ),
        sa.Column("controller", postgresql.UUID(), nullable=False),
        sa.Column("keep_vms_on", sa.Boolean(), nullable=False),
        sa.Column(
            "vm_action_upon_user_disconnect",
            sa.Enum(
                "NONE",
                "RECREATE",
                "SHUTDOWN",
                "SHUTDOWN_FORCED",
                "SUSPEND",
                name="vmactionuponuserdisconnect",
            ),
            server_default="NONE",
            nullable=False
        ),
        sa.Column("free_vm_from_user", sa.Boolean(), nullable=False),
        sa.Column("vm_disconnect_action_timeout",
                  sa.Integer(),
                  server_default="60",
                  nullable=False),
        sa.Column(
            "connection_types",
            postgresql.ARRAY(
                sa.Enum(
                    "SPICE",
                    "SPICE_DIRECT",
                    "RDP",
                    "NATIVE_RDP",
                    "X2GO",
                    name="poolconnectiontypes",
                )
            ),
            nullable=False,
        ),
        sa.Column("tag", postgresql.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["controller"], ["controller.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("verbose_name"),
    )
    op.create_index(
        op.f("ix_pool_connection_types"), "pool", ["connection_types"], unique=False
    )
    op.create_index(op.f("ix_pool_status"), "pool", ["status"], unique=False)
    op.create_table("rds_pool",
                    sa.Column("id", postgresql.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(["id"], ["pool.id"], ondelete="CASCADE"),
                    sa.PrimaryKeyConstraint("id"),
                    sa.UniqueConstraint("id")
                    )
    op.create_table("tk_vm_connection",
                    sa.Column("id", postgresql.UUID(), nullable=False),
                    sa.Column("tk_connection_id", postgresql.UUID(), nullable=False),
                    sa.Column("successful", sa.Boolean(), nullable=False),
                    sa.Column("conn_error_str", sa.Unicode(), nullable=True),
                    sa.Column("vm_id", postgresql.UUID(), nullable=False),
                    sa.Column("connected_to_vm", sa.DateTime(timezone=True), server_default=sa.text("now()"),
                              nullable=False),
                    sa.Column("disconnected_from_vm", sa.DateTime(timezone=True), nullable=True),
                    sa.Column("connection_type",
                              postgresql.ENUM(name="poolconnectiontypes", create_type=False),
                              nullable=True),
                    sa.Column("is_connection_secure", sa.Boolean(), nullable=True),
                    sa.Column("read_speed", sa.Integer(), nullable=True),
                    sa.Column("write_speed", sa.Integer(), nullable=True),
                    sa.Column("avg_rtt", sa.Float(), nullable=True),
                    sa.Column("loss_percentage", sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(["tk_connection_id"], ["active_tk_connection.id"], ondelete="CASCADE"),
                    sa.PrimaryKeyConstraint("id")
                    )
    op.create_table(
        "user_groups",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column("group_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_user_in_group", "user_groups", ["user_id", "group_id"], unique=True
    )
    op.create_table(
        "user_jwtinfo",
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column("token", sa.Unicode(), nullable=False),
        sa.Column(
            "last_changed",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_index(
        op.f("ix_user_jwtinfo_token"), "user_jwtinfo", ["token"], unique=False
    )
    op.create_table(
        "user_role",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("SECURITY_ADMINISTRATOR", "OPERATOR", "ADMINISTRATOR", name="role"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_role_role"), "user_role", ["role"], unique=False)
    op.create_index(
        "ix_user_roles_user_roles", "user_role", ["role", "user_id"], unique=True
    )
    op.create_table(
        "user_tk_permission",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column(
            "permission",
            sa.Enum(
                "USB_REDIR",
                "FOLDERS_REDIR",
                "SHARED_CLIPBOARD_CLIENT_TO_GUEST",
                "SHARED_CLIPBOARD_GUEST_TO_CLIENT",
                name="tkpermission"
            ),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "permission", "user_id", name="permission_user_id_unique_constraint"
        ),
    )
    op.create_index(
        op.f("ix_user_tk_permission_permission"),
        "user_tk_permission",
        ["permission"],
        unique=False,
    )
    op.create_table(
        "automated_pool",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("template_id", postgresql.UUID(), nullable=False),
        sa.Column("increase_step", sa.Integer(), nullable=False),
        sa.Column("max_amount_of_create_attempts", sa.Integer(), nullable=False),
        sa.Column("initial_size", sa.Integer(), nullable=False),
        sa.Column("reserve_size", sa.Integer(), nullable=False),
        sa.Column("total_size", sa.Integer(), nullable=False),
        sa.Column("vm_name_template", sa.Unicode(length=100), nullable=True),
        sa.Column("os_type", sa.Unicode(length=100), nullable=True),
        sa.Column("create_thin_clones", sa.Boolean(), nullable=False),
        sa.Column("is_guest", sa.Boolean(), nullable=False),
        sa.Column("enable_vms_remote_access", sa.Boolean(), nullable=False),
        sa.Column("start_vms", sa.Boolean(), nullable=False),
        sa.Column("set_vms_hostnames", sa.Boolean(), nullable=False),
        sa.Column("include_vms_in_ad", sa.Boolean(), nullable=False),
        sa.Column("ad_ou", sa.Unicode(length=1000), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["pool.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "event_read_by_user",
        sa.Column("event", postgresql.UUID(), nullable=False),
        sa.Column("user", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["event"], ["event.id"]),
        sa.ForeignKeyConstraint(["user"], ["user.id"]),
    )
    op.create_table(
        "static_pool",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["pool.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "vm",
        sa.Column("id", postgresql.UUID(), nullable=False),
        sa.Column("verbose_name", sa.Unicode(length=255), nullable=False),
        sa.Column("pool_id", postgresql.UUID(), nullable=True),
        sa.Column("template_id", sa.Unicode(length=100), nullable=True),
        sa.Column("created_by_vdi", sa.Boolean(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "CREATING",
                "ACTIVE",
                "FAILED",
                "DELETING",
                "SERVICE",
                "PARTIAL",
                "BAD_AUTH",
                "RESERVED",
                name="status",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["pool_id"], ["pool.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_vm_status"), "vm", ["status"], unique=False)
    # ### end Alembic commands ###
    op.create_unique_constraint(None, "automated_pool", ["id"])
    op.create_unique_constraint(None, "pool", ["id"])
    op.create_unique_constraint(None, "static_pool", ["id"])
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_vm_status"), table_name="vm")
    op.drop_table("vm")
    op.drop_table("static_pool")
    op.drop_table("event_read_by_user")
    op.drop_table("automated_pool")
    op.drop_index(
        op.f("ix_user_tk_permission_permission"), table_name="user_tk_permission"
    )
    op.drop_table("user_tk_permission")
    op.drop_index("ix_user_roles_user_roles", table_name="user_role")
    op.drop_index(op.f("ix_user_role_role"), table_name="user_role")
    op.drop_table("user_role")
    op.drop_index(op.f("ix_user_jwtinfo_token"), table_name="user_jwtinfo")
    op.drop_table("user_jwtinfo")
    op.drop_index("ix_user_in_group", table_name="user_groups")
    op.drop_table("user_groups")
    op.drop_index(op.f("ix_pool_status"), table_name="pool")
    op.drop_index(
        op.f("ix_group_tk_permission_permission"), table_name="group_tk_permission"
    )
    op.drop_table("group_tk_permission")
    op.drop_index("ix_group_roles_group_roles", table_name="group_role")
    op.drop_index(op.f("ix_group_role_role"), table_name="group_role")
    op.drop_table("group_role")
    op.drop_index(
        "ix_group_auth_mapping", table_name="group_authentication_directory_mappings"
    )
    op.drop_table("group_authentication_directory_mappings")
    op.drop_table("event")
    op.drop_index("ix_entity_owner_entity_user", table_name="entity_owner")
    op.drop_index("ix_entity_owner_entity_owner", table_name="entity_owner")
    op.drop_index("ix_entity_owner_entity_group", table_name="entity_owner")
    op.drop_table("entity_owner")
    op.drop_table("user")
    op.drop_index(op.f("ix_task_task_type"), table_name="task")
    op.drop_index(op.f("ix_task_status"), table_name="task")
    op.drop_table("task")
    op.drop_index(op.f("ix_mapping_value_type"), table_name="mapping")
    op.drop_table("mapping")
    op.drop_table("journal_settings")
    op.drop_table("group")
    op.drop_index(op.f("ix_entity_entity_uuid"), table_name="entity")
    op.drop_index(op.f("ix_entity_entity_type"), table_name="entity")
    op.drop_index("ix_entity_entity_object_entity_type", table_name="entity")
    op.drop_table("entity")
    op.drop_index(
        op.f("ix_authentication_directory_status"),
        table_name="authentication_directory",
    )
    op.drop_table("authentication_directory")
    op.drop_table("rds_pool")
    op.drop_table("tk_vm_connection")
    op.drop_table("active_tk_connection")
    op.drop_index(op.f("ix_pool_connection_types"), table_name="pool")
    op.drop_index(op.f("ix_controller_status"), table_name="controller")
    op.drop_index(op.f("ix_controller_address"), table_name="controller")
    # Принудительно удаляем типы
    op.execute("DROP TYPE IF EXISTS connectiontypes CASCADE;")
    op.execute("DROP TYPE IF EXISTS directorytypes CASCADE;")
    op.execute("DROP TYPE IF EXISTS entitytype CASCADE;")
    op.execute("DROP TYPE IF EXISTS poolconnectiontypes CASCADE;")
    op.execute("DROP TYPE IF EXISTS role_types CASCADE;")
    op.execute("DROP TYPE IF EXISTS status CASCADE;")
    op.execute("DROP TYPE IF EXISTS task_type CASCADE;")
    op.execute("DROP TYPE IF EXISTS taskstatus CASCADE;")
    op.execute("DROP TYPE IF EXISTS tkpermission CASCADE;")
    op.execute("DROP TYPE IF EXISTS valuetypes CASCADE;")
    op.execute("DROP TYPE IF EXISTS pooltasktype CASCADE;")
    op.execute("DROP TYPE IF EXISTS pooltypes CASCADE;")
    op.execute("DROP TYPE IF EXISTS role CASCADE;")
    op.execute("DROP TYPE IF EXISTS vmactionuponuserdisconnect CASCADE;")
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    # Удаляем каскадно таблицы, которые не могут сами
    op.execute("drop table if exists controller cascade;")
    op.execute("drop table if exists pool cascade;")
