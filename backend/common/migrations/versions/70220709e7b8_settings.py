"""settings.

Revision ID: 70220709e7b8
Revises: cff542bb5131
Create Date: 2021-05-26 18:17:37.416343

"""
import json

from alembic import op

import sqlalchemy as sa

from common.languages import lang_init

# revision identifiers, used by Alembic.
revision = "70220709e7b8"
down_revision = "c8c16054b1a9"
branch_labels = None
depends_on = None
_ = lang_init()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table("settings",
                    sa.Column("settings", sa.JSON, nullable=True))
    settings_dict = {"LANGUAGE": "ru",
                     "DEBUG": False,
                     "VEIL_CACHE_TTL": 1,
                     "VEIL_CACHE_SERVER": "localhost",
                     "VEIL_CACHE_PORT": 11211,
                     "VEIL_REQUEST_TIMEOUT": 15,
                     "VEIL_CONNECTION_TIMEOUT": 15,
                     "VEIL_GUEST_AGENT_EXTRA_WAITING": 3,
                     "VEIL_OPERATION_WAITING": 10,
                     "VEIL_MAX_BODY_SIZE": 1000 * 1024 ^ 3,
                     "VEIL_MAX_CLIENTS": 10,
                     "VEIL_SSL_ON": False,
                     "VEIL_WS_MAX_TIME_TO_WAIT": 60,
                     "VEIL_VM_PREPARE_TIMEOUT": 1200.0,
                     "VEIL_MAX_URL_LEN": 6000,
                     "VEIL_MAX_IDS_LEN": 3780,
                     "VEIL_MAX_VM_CREATE_ATTEMPTS": 10
                     }
    settings_json = json.dumps(settings_dict)
    op.execute(
        """INSERT INTO public.settings (settings) VALUES ('{}')""".format(settings_json))
    op.add_column("journal_settings",
                  sa.Column("ru_msg_str", sa.Unicode(length=128), nullable=True))
    op.add_column("journal_settings",
                  sa.Column("ru_name_str", sa.Unicode(length=128), nullable=True))
    op.add_column("journal_settings",
                  sa.Column("ru_path_str", sa.Unicode(length=128), nullable=True))
    op.add_column("journal_settings",
                  sa.Column("en_msg_str", sa.Unicode(length=128), nullable=True))
    op.add_column("journal_settings",
                  sa.Column("en_name_str", sa.Unicode(length=128), nullable=True))
    op.add_column("journal_settings",
                  sa.Column("en_path_str", sa.Unicode(length=128), nullable=True))
    op.execute(
        "UPDATE public.journal_settings SET ru_msg_str = 'Добавлен новый архив журнала.'")
    op.execute(
        "UPDATE public.journal_settings SET ru_name_str = 'Имя архива:'")
    op.execute(
        "UPDATE public.journal_settings SET ru_path_str = 'путь:'")
    op.execute(
        "UPDATE public.journal_settings SET en_msg_str = 'Add new journal archive.'")
    op.execute(
        "UPDATE public.journal_settings SET en_name_str = 'Archive name:'")
    op.execute(
        "UPDATE public.journal_settings SET en_path_str = 'path:'")

    op.execute(
        """CREATE OR REPLACE FUNCTION archived(partition_date timestamp)
                RETURNS VOID AS
                $BODY$
                DECLARE
                  by_count BOOLEAN;
                  language TEXT;
                  message TEXT;
                  name_str TEXT;
                  path_str TEXT;
                  part_interval INTERVAL;
                  part_form TEXT;
                  path TEXT;
                  count INTEGER;
                  part TEXT;
                  full_path TEXT;
                  index INTEGER;
                  sql TEXT;
                  entity_id uuid = uuid_generate_v4();
                  event_id uuid = uuid_generate_v4();
                BEGIN
                  EXECUTE 'SELECT by_count FROM journal_settings' into by_count;
                  EXECUTE 'SELECT settings->>''LANGUAGE'' FROM settings' into language;
                  IF language = 'ru' THEN
                        EXECUTE 'SELECT ru_msg_str FROM journal_settings' into message;
                        EXECUTE 'SELECT ru_name_str FROM journal_settings' into name_str;
                        EXECUTE 'SELECT ru_path_str FROM journal_settings' into path_str;
                  ELSIF language = 'en' THEN
                        EXECUTE 'SELECT en_msg_str FROM journal_settings' into message;
                        EXECUTE 'SELECT en_name_str FROM journal_settings' into name_str;
                        EXECUTE 'SELECT en_path_str FROM journal_settings' into path_str;
                  END IF;
                  IF by_count IS TRUE THEN
                        BEGIN
                          EXECUTE 'SELECT dir_path FROM journal_settings' into path;
                          EXECUTE 'SELECT count FROM journal_settings' into count;
                          EXECUTE 'SELECT COUNT(*) FROM event' into index;
                          part := format('event_%s', index);
                          full_path := format('%s%s.csv', path, part);
                          select format('COPY (SELECT * from event LIMIT %s OFFSET (%s - %s))
                                        TO ''%s'' With HEADER CSV', count, index, count, full_path) into sql;
                          EXECUTE sql;
                          select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                        (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                          EXECUTE sql;
                          select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                        VALUES (''%s'', 0, ''%s'',
                                        ''%s %s, %s %s'', ''system'', ''%s'')',
                                        event_id, message, name_str, part, path_str, path, entity_id) into sql;
                          EXECUTE sql;
                        EXCEPTION
                            WHEN undefined_file OR insufficient_privilege THEN
                              select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                            (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                              EXECUTE sql;
                              select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                            VALUES (''%s'', 2, ''Error archiving of journal: Permission denied.'',
                                            ''%s'', ''system'', ''%s'')',
                                            event_id, SQLERRM, entity_id) into sql;
                              EXECUTE sql;
                        END;
                  ELSE
                        BEGIN
                          EXECUTE 'SELECT interval FROM journal_settings' into part_interval;
                          EXECUTE 'SELECT form FROM journal_settings' into part_form;
                          EXECUTE 'SELECT dir_path FROM journal_settings' into path;
                          part := format('event_%s', to_char(partition_date - part_interval, part_form));
                          full_path := format('%s%s.csv', path, part);
                          IF (EXISTS (SELECT *
                                        FROM INFORMATION_SCHEMA.TABLES
                                        WHERE TABLE_SCHEMA = 'public'
                                        AND TABLE_NAME = part)) THEN
                             BEGIN
                               select format('COPY (SELECT * from event_%s) TO ''%s'' With HEADER CSV',
                                      to_char(partition_date - part_interval, part_form), full_path) into sql;
                               EXECUTE sql;
                               select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                             (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                               EXECUTE sql;
                               select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                        VALUES (''%s'', 0, ''%s'',
                                        ''%s %s, %s %s'', ''system'', ''%s'')',
                                        event_id, message, name_str, part, path_str, path, entity_id) into sql;
                               EXECUTE sql;
                             END;
                          END IF;
                        EXCEPTION
                            WHEN undefined_file OR insufficient_privilege THEN
                              select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                            (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                              EXECUTE sql;
                              select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                            VALUES (''%s'', 2, ''Error archiving of journal: Permission denied.'',
                                            ''%s'', ''system'', ''%s'')',
                                            event_id, SQLERRM, entity_id) into sql;
                              EXECUTE sql;
                        END;
                  END IF;
                END;
                $BODY$
                LANGUAGE plpgsql;"""
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("settings")
    op.drop_column("journal_settings", "ru_msg_str")
    op.drop_column("journal_settings", "ru_name_str")
    op.drop_column("journal_settings", "ru_path_str")
    op.drop_column("journal_settings", "en_msg_str")
    op.drop_column("journal_settings", "en_name_str")
    op.drop_column("journal_settings", "en_path_str")
    msg_str = _("Add new journal archive.")
    name_str = _("Archive name:")
    path_str = _("path:")
    op.execute(
        """CREATE OR REPLACE FUNCTION archived(partition_date timestamp)
                RETURNS VOID AS
                $BODY$
                DECLARE
                  by_count BOOLEAN;
                  part_interval INTERVAL;
                  part_form TEXT;
                  path TEXT;
                  count INTEGER;
                  part TEXT;
                  full_path TEXT;
                  index INTEGER;
                  sql TEXT;
                  entity_id uuid = uuid_generate_v4();
                  event_id uuid = uuid_generate_v4();
                BEGIN
                  EXECUTE 'SELECT by_count FROM journal_settings' into by_count;
                  IF by_count IS TRUE THEN
                        BEGIN
                          EXECUTE 'SELECT dir_path FROM journal_settings' into path;
                          EXECUTE 'SELECT count FROM journal_settings' into count;
                          EXECUTE 'SELECT COUNT(*) FROM event' into index;
                          part := format('event_%s', index);
                          full_path := format('%s%s.csv', path, part);
                          select format('COPY (SELECT * from event LIMIT %s OFFSET (%s - %s))
                                        TO ''%s'' With HEADER CSV', count, index, count, full_path) into sql;
                          EXECUTE sql;
                          select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                        (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                          EXECUTE sql;
                          select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                        VALUES (''%s'', 0, ''{message}'',
                                        ''{name_str} %s, {path_str} %s'', ''system'', ''%s'')',
                                        event_id, part, path, entity_id) into sql;
                          EXECUTE sql;
                        EXCEPTION
                            WHEN undefined_file OR insufficient_privilege THEN
                              select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                            (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                              EXECUTE sql;
                              select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                            VALUES (''%s'', 2, ''Error archiving of journal: Permission denied.'',
                                            ''%s'', ''system'', ''%s'')',
                                            event_id, SQLERRM, entity_id) into sql;
                              EXECUTE sql;
                        END;
                  ELSE
                        BEGIN
                          EXECUTE 'SELECT interval FROM journal_settings' into part_interval;
                          EXECUTE 'SELECT form FROM journal_settings' into part_form;
                          EXECUTE 'SELECT dir_path FROM journal_settings' into path;
                          part := format('event_%s', to_char(partition_date - part_interval, part_form));
                          full_path := format('%s%s.csv', path, part);
                          IF (EXISTS (SELECT *
                                        FROM INFORMATION_SCHEMA.TABLES
                                        WHERE TABLE_SCHEMA = 'public'
                                        AND TABLE_NAME = part)) THEN
                             BEGIN
                               select format('COPY (SELECT * from event_%s) TO ''%s'' With HEADER CSV',
                                      to_char(partition_date - part_interval, part_form), full_path) into sql;
                               EXECUTE sql;
                               select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                             (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                               EXECUTE sql;
                               select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                        VALUES (''%s'', 0, ''{message}'',
                                        ''{name_str} %s, {path_str} %s'', ''system'', ''%s'')',
                                        event_id, part, path, entity_id) into sql;
                               EXECUTE sql;
                             END;
                          END IF;
                        EXCEPTION
                            WHEN undefined_file OR insufficient_privilege THEN
                              select format('INSERT INTO entity (id, entity_type, entity_uuid) VALUES
                                            (''%s'', ''SECURITY'', NULL)', entity_id) into sql;
                              EXECUTE sql;
                              select format('INSERT INTO event (id, event_type, message, description, "user", entity_id)
                                            VALUES (''%s'', 2, ''Error archiving of journal: Permission denied.'',
                                            ''%s'', ''system'', ''%s'')',
                                            event_id, SQLERRM, entity_id) into sql;
                              EXECUTE sql;
                        END;
                  END IF;
                END;
                $BODY$
                LANGUAGE plpgsql;""".format(
            message=msg_str, name_str=name_str, path_str=path_str
        )
    )
    # ### end Alembic commands ###
