# This is example inventory file!
# Please specify the ip addresses and connection settings for your environment
# The specified ip addresses will be used to listen by the cluster components.

# "postgresql_exists='true'" if PostgreSQL is already exists and running on master (for initial deployment only)
# "hostname=" variable is optional (used to change the server name)

# if dcs_exists: false and dcs_type: "etcd" (in vars/pgcluster.yml)
[etcd_cluster]  # recommendation: 3 or 5-7 nodes
192.168.5.37
192.168.5.221
192.168.6.70


# if with_haproxy_load_balancing: true (in vars/pgcluster.yml)
[balancers]
192.168.5.37
192.168.5.221
192.168.6.70


# PostgreSQL nodes
[master]
192.168.5.37 hostname=pgnode01 postgresql_exists='false'

[replica]
192.168.5.221 hostname=pgnode02
192.168.6.70 hostname=pgnode03

[postgres_cluster:children]
master
replica

[broker]
127.0.0.1 hostname=broker broker_exists='false'

# In this example, all components will be installed on PostgreSQL nodes
# You can deploy the etcd cluster and the haproxy balancers on other dedicated servers. 


# if pgbackrest_install: true and "repo_host" is set (in vars/pgcluster.yml)
[pgbackrest]  # optional (Dedicated Repository Host)


# Connection settings
[all:vars]
ansible_connection='ssh'
ansible_ssh_port='22'
ansible_user='user'
ansible_ssh_pass='Bazalt1!'  # "sshpass" package is required for use "ansible_ssh_pass"
# ansible_ssh_private_key_file=
ansible_python_interpreter='/usr/bin/python3'  # is required for use python3

[broker:vars]
ansible_connection='local'

[pgbackrest:vars]
ansible_user='postgres'
ansible_ssh_pass='secretpassword'

