---
# yamllint disable rule:line-length

- block:  # install vip-manager package from repo
    - name: Get vip-manager package
      get_url:
        url: "{{ item }}"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      loop:
        - "{{ vip_manager_package_repo }}"
      environment: "{{ proxy_env | default({}) }}"

    - name: Install vip-manager
      apt:
        force_apt_get: true
        deb: "/tmp/{{ vip_manager_package_repo | basename }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install vip-manager
      package:
        name: "/tmp/{{ vip_manager_package_repo | basename }}"
        state: present
        disable_gpg_check: true
      when: ansible_os_family == "RedHat"
  when: installation_method == "repo" and vip_manager_package_repo | length > 0
  tags: vip, vip_manager, vip_manager_install

- block:  # install vip-manager package from file
    - name: Copy vip-manager package into /tmp
      copy:
        src: "{{ vip_manager_package_file }}"
        dest: /tmp/

    - name: Install vip-manager
      apt:
        force_apt_get: true
        deb: "/tmp/{{ vip_manager_package_file | basename }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install vip-manager
      package:
        name: "/tmp/{{ vip_manager_package_file | basename }}"
        state: present
        disable_gpg_check: true
      when: ansible_os_family == "RedHat"
  when: installation_method == "file" and vip_manager_package_file | length > 0
  tags: vip, vip_manager, vip_manager_install

- name: Make sure the conf directory "{{ vip_manager_conf | dirname }}" exist
  file:
    dest: "{{ vip_manager_conf | dirname }}"
    state: directory
    owner: postgres
    group: postgres
  tags: vip, vip_manager, vip_manager_conf

- name: Generate conf file "{{ vip_manager_conf }}"
  template:
    src: templates/vip-manager.yml.j2
    dest: "{{ vip_manager_conf }}"
    owner: postgres
    group: postgres
    mode: 0644
  notify: "restart vip-manager"
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: vip, vip_manager, vip_manager_conf

- block:  # for add_pgnode.yml
    - name: Fetch "{{ vip_manager_conf | basename }}" conf file from master
      run_once: true
      fetch:
        src: "{{ vip_manager_conf }}"
        dest: "files/{{ vip_manager_conf | basename }}"
        validate_checksum: true
        flat: true
      delegate_to: "{{ groups.master[0] }}"

    - name: Copy "{{ vip_manager_conf | basename }}" conf file to replica
      copy:
        src: "files/{{ vip_manager_conf | basename }}"
        dest: "{{ vip_manager_conf | dirname }}"
      notify: "restart vip-manager"

    - name: Prepare "{{ vip_manager_conf | basename }}" conf file (replace "nodename","iface")
      lineinfile:
        path: "{{ vip_manager_conf }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - {regexp: '^nodename:', line: 'nodename: "{{ ansible_hostname }}"'}
        - {regexp: '^iface:', line: 'iface: {{ vip_manager_iface }} # interface to which the virtual ip will be added'}
      loop_control:
        label: "{{ item.line }}"
      notify: "restart vip-manager"
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: vip, vip_manager, vip_manager_conf

- name: Generate systemd service file
  template:
    src: templates/vip-manager.service.j2
    dest: /etc/systemd/system/vip-manager.service
    owner: postgres
    group: postgres
    mode: 0644
  notify: "restart vip-manager"
  tags: vip, vip_manager, vip_manager_service

- name: Make sure handlers are flushed immediately
  meta: flush_handlers

...
