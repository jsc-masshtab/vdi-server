---
# yamllint disable rule:line-length
# yamllint disable rule:comments-indentation

- name: Make sure handlers are flushed immediately
  meta: flush_handlers

# pip install
- import_tasks: pip.yml
  when: patroni_installation_method == "pip"
  tags: patroni, patroni_install, pip

# Patroni install
- block:  # installation_method: "repo" and patroni_installation_method: "pip"
    - name: Copy patroni requirements.txt file
      copy:
        src: requirements.txt
        dest: /tmp/requirements.txt
      when: patroni_pip_requirements_repo | length < 1

    - name: Install setuptools
      pip:
        name: setuptools
        state: latest
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_repo | length < 1

    - name: Install requirements
      pip:
        requirements: /tmp/requirements.txt
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ postgresql_bin_dir }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_repo | length < 1

    - name: Install patroni
      pip:
        name: patroni
        state: latest
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_repo | length < 1 and patroni_install_version == "latest"

    - name: "Install patroni {{ patroni_install_version }}"
      pip:
        name: "patroni=={{ patroni_install_version }}"
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_repo | length < 1 and patroni_install_version != "latest"
  when: installation_method == "repo" and patroni_installation_method == "pip"
  environment: "{{ proxy_env | default({}) }}"
  tags: patroni, patroni_install

- block:  # when "patroni_pip_requirements_repo" and "patroni_pip_package_repo" is defined
    - name: Download patroni requirements
      get_url:
        url: "{{ item }}"
        dest: /tmp/
        timeout: 120
        validate_certs: false
      loop: "{{ patroni_pip_requirements_repo }}"
      when: patroni_pip_requirements_repo | length > 0

    - name: Download patroni package
      get_url:
        url: "{{ item }}"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      loop: "{{ patroni_pip_package_repo | list }}"
      when: patroni_pip_package_repo | length > 0

    - name: Install requirements
      pip:
        name: "file:///tmp/{{ item }}"
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_requirements_repo | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_repo | length > 0

    - name: Install patroni
      pip:
        name: "file:///tmp/{{ item }}"
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_package_repo | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_repo | length > 0
  when: installation_method == "repo" and patroni_installation_method == "pip"
  tags: patroni, patroni_install

- block:  # installation_method: "file" and patroni_installation_method: "pip"
    - name: Copy patroni requirements
      copy:
        src: "{{ item }}"
        dest: /tmp/
      loop: "{{ patroni_pip_requirements_file }}"
      when: patroni_pip_requirements_file | length > 0

    - name: Copy patroni package
      copy:
        src: "{{ item }}"
        dest: /tmp/
      loop: "{{ patroni_pip_package_file }}"
      when: patroni_pip_package_file | length > 0

    - name: Install requirements
      pip:
        name: "file:///tmp/{{ item }}"
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_requirements_file | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_file | length > 0

    - name: Install patroni
      pip:
        name: "file:///tmp/{{ item }}"
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_package_file | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_file | length > 0
  when: installation_method == "file" and patroni_installation_method == "pip"
  tags: patroni, patroni_install

- block:  # installation_method: "repo" and patroni_installation_method: "rpm/deb"
    # Debian
    - name: Install patroni package
      package:
        name: patroni
        state: present
      when: ansible_os_family == "Debian" and patroni_deb_package_repo | length < 1

    # RedHat
    - name: Install patroni package
      package:
        name: patroni
        state: present
      when: ansible_os_family == "RedHat" and patroni_rpm_package_repo | length < 1

    # when patroni_deb_package_repo or patroni_rpm_package_repo URL is defined
    # Debian
    - name: Download patroni deb package
      get_url:
        url: "{{ item }}"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      loop: "{{ patroni_deb_package_repo | list }}"
      when: ansible_os_family == "Debian" and patroni_deb_package_repo | length > 0

    - name: Install patroni from deb package
      apt:
        force_apt_get: true
        deb: "/tmp/{{ item }}"
        state: present
      loop: "{{ patroni_deb_package_repo | map('basename') | list }}"
      when: ansible_os_family == "Debian" and patroni_deb_package_repo | length > 0

    # RedHat
    - name: Download patroni rpm package
      get_url:
        url: "{{ item }}"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      loop: "{{ patroni_rpm_package_repo | list }}"
      when: ansible_os_family == "RedHat" and patroni_rpm_package_repo | length > 0

    - name: Install patroni from rpm package
      package:
        name: "/tmp/{{ item }}"
        state: present
      loop: "{{ patroni_rpm_package_repo | map('basename') | list }}"
      when: ansible_os_family == "RedHat" and patroni_rpm_package_repo | length > 0
  environment: "{{ proxy_env | default({}) }}"
  when: installation_method == "repo" and (patroni_installation_method == "rpm" or patroni_installation_method == "deb")
  tags: patroni, patroni_install

# installation_method: "file" and patroni_installation_method: "rpm/deb"
- block:
    # Debian
    - name: Copy patroni deb package into /tmp
      copy:
        src: "{{ patroni_deb_package_file }}"
        dest: /tmp/
      when: ansible_os_family == "Debian"

    - name: Install patroni from deb package
      apt:
        force_apt_get: true
        deb: "/tmp/{{ patroni_deb_package_file | basename }}"
        state: present
      when: ansible_os_family == "Debian"

    # RedHat
    - name: Copy patroni rpm package into /tmp
      copy:
        src: "{{ patroni_rpm_package_file }}"
        dest: /tmp/
      when: ansible_os_family == "RedHat"

    - name: Install patroni from rpm package
      package:
        name: "/tmp/{{ patroni_rpm_package_file | basename }}"
        state: present
      when: ansible_os_family == "RedHat"
  when: installation_method == "file" and (patroni_installation_method == "rpm" or patroni_installation_method == "deb")
  tags: patroni, patroni_install

# Patroni configure
- name: Create conf directory
  file:
    path: /etc/patroni
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  tags: patroni, patroni_conf

- name: Generate conf file "/etc/patroni/patroni.yml"
  template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: patroni, patroni_conf

- block:  # for add_pgnode.yml
    - name: Fetch patroni.yml conf file from master
      run_once: true
      fetch:
        src: /etc/patroni/patroni.yml
        dest: files/patroni.yml
        validate_checksum: true
        flat: true
      delegate_to: "{{ groups.master[0] }}"

    - name: Copy patroni.yml conf file to replica
      copy:
        src: files/patroni.yml
        dest: /etc/patroni/patroni.yml
        owner: postgres
        group: postgres
        mode: 0640

    - name: Prepare patroni.yml conf file (replace "name","listen","connect_address")
      lineinfile:
        path: /etc/patroni/patroni.yml
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - {regexp: '^name:', line: 'name: {{ ansible_hostname }}'}
        - {regexp: '^  listen: .*:8008$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }}:8008'}
        - {regexp: '^  connect_address: .*:8008$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:8008'}
        - {regexp: '^  listen: ((?!8008).)*$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }},127.0.0.1:{{ postgresql_port }}'}
        - {regexp: '^  connect_address: ((?!8008).)*$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ postgresql_port }}'}
      loop_control:
        label: "{{ item.line }}"
      when: with_haproxy_load_balancing|bool or pgbouncer_install|bool or (cluster_vip is not defined or cluster_vip | length < 1)

    - name: Prepare patroni.yml conf file (replace "name","listen","connect_address")
      lineinfile:
        path: /etc/patroni/patroni.yml
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - {regexp: '^name:', line: 'name: {{ ansible_hostname }}'}
        - {regexp: '^  listen: .*:8008$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }}:8008'}
        - {regexp: '^  connect_address: .*:8008$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:8008'}
        - {regexp: '^  listen: ((?!8008).)*$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }},127.0.0.1:{{ postgresql_port }}'}  # noqa 204
        - {regexp: '^  connect_address: ((?!8008).)*$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ postgresql_port }}'}
      loop_control:
        label: "{{ item.line }}"
      when: not with_haproxy_load_balancing|bool and not pgbouncer_install|bool and (cluster_vip is defined and cluster_vip | length > 0)
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: patroni, patroni_conf

- name: Copy systemd service file "/etc/systemd/system/patroni.service"
  template:
    src: templates/patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    owner: postgres
    group: postgres
    mode: 0644
  tags: patroni, patroni_conf, patroni_service

- name: Prepare PostgreSQL | create statistics directory (if not already exists)
  file:
    path: "{{ postgresql_stats_temp_directory_path }}"
    state: directory
    mode: 01777
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
  tags: patroni, pgsql_stats_tmp

- name: Prepare PostgreSQL | mount the statistics directory in memory (tmpfs)
  mount:
    path: "{{ postgresql_stats_temp_directory_path }}"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ postgresql_stats_temp_directory_size }},uid=postgres,gid=postgres"
    state: mounted
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
  tags: patroni, pgsql_stats_tmp

- name: Prepare PostgreSQL | make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: 0700
  tags: patroni

- name: Prepare PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" exists
  file:
    path: "{{ postgresql_wal_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: 0700
  when: postgresql_wal_dir is defined and postgresql_wal_dir | length > 0
  tags: patroni, custom_wal_dir

- block:  # when postgresql exists (master)
    - name: Prepare PostgreSQL | check that data directory "{{ postgresql_data_dir }}" is initialized on Master
      stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_initialized

    - name: Prepare PostgreSQL | data directory check result
      fail:
        msg: "Whoops! data directory {{ postgresql_data_dir }} is not initialized"
      when: not pgdata_initialized.stat.exists
      tags: patroni, patroni_check_init

    - name: Prepare PostgreSQL | check PostgreSQL is started
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_status_result
      changed_when: false
      failed_when:
        - pg_ctl_status_result.rc != 0
        - pg_ctl_status_result.rc != 3

      # "Debian"
    - name: Prepare PostgreSQL | start PostgreSQL
      become: true
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start"
      when: pg_ctl_status_result.rc == 3 and
            ansible_os_family == "Debian"

      # "RedHat" or PostgresPro
    - name: Prepare PostgreSQL | start PostgreSQL
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl start -D {{ postgresql_data_dir }}"
      when: pg_ctl_status_result.rc == 3 and
            (ansible_os_family == "RedHat" or
            postgresql_packages|join(" ") is search("postgrespro"))

    - name: Prepare PostgreSQL | check PostgreSQL is accepting connections
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_isready -p {{ postgresql_port }}"
      register: pg_isready_result
      until: pg_isready_result.rc == 0
      retries: 30
      delay: 10
      changed_when: false

    - name: Prepare PostgreSQL | generate pg_hba.conf on Master
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640

    - name: Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'SELECT pg_reload_conf()'"
      register: psql_reload_result
      failed_when: psql_reload_result.rc != 0

    - name: Prepare PostgreSQL | make sure the user "{{ patroni_superuser_username }}" are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: "{{ patroni_superuser_username }}"
        password: "{{ patroni_superuser_password }}"
        encrypted: true
        role_attr_flags: "SUPERUSER"
        login_unix_socket: "{{ postgresql_unix_socket_dir }}"
        port: "{{ postgresql_port }}"
        state: present
      become: true
      become_user: postgres

    - name: Prepare PostgreSQL | make sure the user "{{ patroni_replication_username }}" are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: "{{ patroni_replication_username }}"
        password: "{{ patroni_replication_password }}"
        encrypted: true
        role_attr_flags: "LOGIN,REPLICATION"
        login_unix_socket: "{{ postgresql_unix_socket_dir }}"
        port: "{{ postgresql_port }}"
        state: present
      become: true
      become_user: postgres

    - name: Prepare PostgreSQL | waiting for CHECKPOINT to complete before stopping postgresql
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'CHECKPOINT'"
      register: checkpoint_result
      until: checkpoint_result.rc == 0
      retries: 180
      delay: 15

      # "Debian"
    - name: Prepare PostgreSQL | stop PostgreSQL (will be managed by patroni)
      become: true
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop -m fast"
      register: stop_result
      until: stop_result.rc == 0
      retries: 10
      delay: 30
      when: ansible_os_family == "Debian" and
            postgresql_packages|join(" ") is not search("postgrespro")

      # "RedHat" or PostgresPro
    - name: Prepare PostgreSQL | stop PostgreSQL (will be managed by patroni)
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl stop -D {{ postgresql_data_dir }} -m fast"
      register: stop_result
      until: stop_result.rc == 0
      retries: 30
      delay: 10
      when: ansible_os_family == "RedHat" or
            postgresql_packages|join(" ") is search("postgrespro")

    - name: Prepare PostgreSQL | check PostgreSQL is stopped
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_stop_result
      failed_when: pg_ctl_stop_result.rc != 3
      changed_when: false
  when: is_master == "true" and postgresql_exists == "true"
  tags: patroni, patroni_start_master

- block:  # wheh postgresql NOT exists or PITR
    - name: Prepare PostgreSQL | make sure PostgreSQL data directory "{{ postgresql_data_dir }}" exists
      file:
        path: "{{ postgresql_data_dir }}"
        owner: postgres
        group: postgres
        state: directory
        mode: 0700

    - name: Prepare PostgreSQL | check that data directory "{{ postgresql_data_dir }}" is not initialized
      stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_initialized
      when: patroni_cluster_bootstrap_method == "initdb"

    - name: Prepare PostgreSQL | data directory check result
      fail:
        msg: "Whoops! data directory {{ postgresql_data_dir }} is already initialized"
      when: pgdata_initialized.stat.exists is defined and
            pgdata_initialized.stat.exists
      tags: patroni, patroni_check_init

      # for Debian based distros only
      # patroni bootstrap failure is possible if the postgresql config files are missing
    - name: Prepare PostgreSQL | make sure the postgresql config files exists
      stat:
        path: "{{ postgresql_conf_dir }}/postgresql.conf"
      register: postgresql_conf_file
      when: ansible_os_family == "Debian" and
            postgresql_packages|join(" ") is not search("postgrespro")

    - name: Prepare PostgreSQL | generate default postgresql config files
      become: true
      become_user: postgres
      command: >
        /usr/bin/pg_createcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
        -d {{ postgresql_data_dir }}
        -p {{ postgresql_port }}
        -e {{ postgresql_encoding }}
        --locale {{ postgresql_locale }}
      register: pg_createcluster_result
      failed_when: pg_createcluster_result.rc != 0
      when: (ansible_os_family == "Debian" and
            postgresql_packages|join(" ") is not search("postgrespro")) and
            not postgresql_conf_file.stat.exists

    - name: Prepare PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty
      file:
        path: "{{ postgresql_data_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: 0700
      loop:
        - absent
        - directory
      when: patroni_cluster_bootstrap_method != "pgbackrest"  # --delta restore

    - name: Prepare PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" is empty
      file:
        path: "{{ postgresql_wal_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: 0700
      loop:
        - absent
        - directory
      when: (postgresql_wal_dir is defined and postgresql_wal_dir | length > 0) and
            patroni_cluster_bootstrap_method != "pgbackrest"  # --delta restore
  when: postgresql_exists != "true"
  tags: patroni, point_in_time_recovery

- block:  # PITR (custom bootstrap)
# Prepare (install pexpect, ruamel.yaml)
    - name: Prepare | Make sure the ansible required python library is exist
      pip:
        name: "{{ item }}"
        state: present
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      loop:
        - pexpect
        - ruamel.yaml
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
# Run PITR
    - name: Stop patroni service on the Replica servers (if running)
      systemd:
        name: patroni
        state: stopped
      when: is_master != "true"

    - name: Stop patroni service on the Master server (if running)
      systemd:
        name: patroni
        state: stopped
      when: is_master == "true"

    - name: Remove patroni cluster "{{ patroni_cluster_name }}" from DCS (if exist)
      become: true
      become_user: postgres
      expect:
        command: "patronictl -c /etc/patroni/patroni.yml remove {{ patroni_cluster_name }}"
        responses:
          'Please confirm the cluster name to remove': '{{ patroni_cluster_name }}'
          'You are about to remove all information in DCS': 'Yes I am aware'
      register: patronictl_remove_result
      changed_when:
        patronictl_remove_result.rc == 0 and
        patronictl_remove_result.stdout|lower is not search("key not found")
      failed_when:
        patronictl_remove_result.rc != 0
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      when: is_master == "true"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - block:  # for pgbackrest only (for use --delta restore)
        - name: Run "{{ pgbackrest_patroni_cluster_restore_command }}" on Master
          command: >
            {{ pgbackrest_patroni_cluster_restore_command }}
            {{ '--target-action=promote' if pgbackrest_patroni_cluster_restore_command is search('--type=') else '' }}
          async: 86400  # timeout 24 hours
          poll: 0
          register: pgbackrest_restore_master
          when: is_master == "true"

          # if patroni_create_replica_methods: "pgbackrest"
        - name: Run "{{ pgbackrest_patroni_cluster_restore_command }}" on Replica
          command: >
            {{ pgbackrest_patroni_cluster_restore_command }}
            {{ '--target-action=shutdown' if pgbackrest_patroni_cluster_restore_command is search('--type=') else '' }}
          async: 86400  # timeout 24 hours
          poll: 0
          register: pgbackrest_restore_replica
          when: is_master != "true" and 'pgbackrest' in patroni_create_replica_methods

        - name: Waiting for restore from backup
          async_status:
            jid: "{{ item.ansible_job_id }}"
          loop:
            - "{{ pgbackrest_restore_master }}"
            - "{{ pgbackrest_restore_replica }}"
          loop_control:
            label: "{{ item.changed }}"
          register: pgbackrest_restore_jobs_result
          until: pgbackrest_restore_jobs_result.finished
          retries: 2880  # timeout 24 hours
          delay: 30
          when: item.ansible_job_id is defined

        - name: Start PostgreSQL for Recovery  # Debian
          command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start -o '-c hot_standby=off'"
          when: ansible_os_family == "Debian" and
                (is_master == "true" or
                (is_master != "true" and 'pgbackrest' in patroni_create_replica_methods))

        - name: Start PostgreSQL for Recovery  # RedHat or PostgresPro
          command: "{{ postgresql_bin_dir }}/pg_ctl start -D {{ postgresql_data_dir }} -o '-c hot_standby=off'"
          when: (ansible_os_family == "RedHat" or postgresql_packages|join(" ") is search("postgrespro")) and
                (is_master == "true" or
                (is_master != "true" and 'pgbackrest' in patroni_create_replica_methods))

        - name: Waiting for PostgreSQL Recovery to complete (WAL apply)
          command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -tAc 'SELECT pg_is_in_recovery()'"
          register: pg_is_in_recovery
          until: pg_is_in_recovery.stdout != "t"
          retries: 1200  # timeout 10 hours
          delay: 30
          changed_when: false
          failed_when: false
          when: is_master == "true" or
                (is_master != "true" and 'pgbackrest' in patroni_create_replica_methods)

        - name: Check that PostgreSQL is stopped
          command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
          register: pg_ctl_status_result
          changed_when: false
          failed_when: false

        - name: Stop PostgreSQL  # "Debian"
          command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop -m fast"
          register: stop_result
          until: stop_result.rc == 0
          retries: 10
          delay: 10
          when: ansible_os_family == "Debian" and
                (pg_ctl_status_result.rc is defined and pg_ctl_status_result.rc != 3)

        - name: Stop PostgreSQL  # "RedHat" or PostgresPro
          command: "{{ postgresql_bin_dir }}/pg_ctl stop -D {{ postgresql_data_dir }} -m fast"
          register: stop_result
          until: stop_result.rc == 0
          retries: 10
          delay: 10
          when: (ansible_os_family == "RedHat" or postgresql_packages|join(" ") is search("postgrespro")) and
                (pg_ctl_status_result.rc is defined and pg_ctl_status_result.rc != 3)
      when: patroni_cluster_bootstrap_method == "pgbackrest"
      become: true
      become_user: postgres
  environment: "{{ proxy_env | default({}) }}"
  when: patroni_cluster_bootstrap_method != "initdb" and
        (pgbackrest_install|bool or wal_g_install|bool)
  tags: patroni, point_in_time_recovery

- block:  # PITR (custom bootstrap) - disable archive_command
    - name: Check the patroni.dynamic.json exists
      stat:
        path: "{{ postgresql_data_dir }}/patroni.dynamic.json"
      register: patroni_dynamic_json

    - name: Remove patroni.dynamic.json file
      file:
        path: "{{ postgresql_data_dir }}/patroni.dynamic.json"
        state: absent
      when: not keep_patroni_dynamic_json|bool

    - name: Edit patroni.dynamic.json | disable archive_command (if enabled)
      yedit:
        src: "{{ postgresql_data_dir }}/patroni.dynamic.json"
        key: postgresql.parameters.archive_command
        value: "cd ."  # not doing anything yet with WAL-s
        content_type: json
      vars:
        ansible_python_interpreter: /usr/bin/python3
      when: patroni_dynamic_json.stat.exists and
            keep_patroni_dynamic_json|bool and disable_archive_command|bool

    - name: Edit patroni.yml | disable archive_command (if enabled)
      yedit:
        src: /etc/patroni/patroni.yml
        key: bootstrap.dcs.postgresql.parameters.archive_command
        value: "cd ."  # not doing anything yet with WAL-s
      vars:
        ansible_python_interpreter: /usr/bin/python3
      when: disable_archive_command|bool
  when: patroni_cluster_bootstrap_method != "initdb" and
        (pgbackrest_install|bool or wal_g_install|bool) and
        (existing_pgcluster is not defined or not existing_pgcluster|bool)
  become: true
  become_user: postgres
  tags: patroni, point_in_time_recovery

- block:  # PITR (custom bootstrap) - generate pg_hba.conf
    - name: Generate pg_hba.conf (before start patroni)
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640
  when: patroni_cluster_bootstrap_method != "initdb" and
        postgresql_conf_dir != postgresql_data_dir and
        (existing_pgcluster is not defined or not existing_pgcluster|bool)
  tags: patroni

- block:  # start patroni on master
    - name: Start patroni service on the Master server
      systemd:
        daemon_reload: true
        name: patroni
        state: restarted
        enabled: true

    - name: Wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false

    - name: Check PostgreSQL is started and accepting connections on Master
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_isready -p {{ postgresql_port }}"
      register: pg_isready_result
      until: pg_isready_result.rc == 0
      retries: 1000
      delay: 30
      changed_when: false

    - name: Wait for the cluster to initialize (master is the leader with the lock)
      uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/leader"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 10
      delay: 2
  when: is_master == "true"
  tags: patroni, patroni_start_master, point_in_time_recovery

- block:  # pg_hba (using a templates/pg_hba.conf.j2)
    - name: Prepare PostgreSQL | generate pg_hba.conf on Master
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640
      when: is_master == "true"

    - name: Prepare PostgreSQL | generate pg_hba.conf on Replica
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640
      when: is_master != "true" and
            postgresql_conf_dir != postgresql_data_dir

    - name: Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'SELECT pg_reload_conf()'"
      register: psql_reload_result
      changed_when: psql_reload_result.rc == 0
      failed_when: false  # exec pg_reload_conf on all running postgres (to re-run with --tag pg_hba).
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: patroni, pg_hba, pg_hba_generate

- block:  # PITR (custom bootstrap) - superuser and replication
    - name: Make sure the Master is not in recovery mode
      command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -tAc 'SELECT pg_is_in_recovery()'"
      register: pg_is_in_recovery
      until: pg_is_in_recovery.stdout != "t"
      retries: 1200  # timeout 10 hours
      delay: 30
      changed_when: false
      when: is_master == "true"

    - name: Make sure the postgresql users are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: "{{ item.role }}"
        password: "{{ item.pass }}"
        role_attr_flags: "{{ item.role_attr }}"
        login_unix_socket: "{{ postgresql_unix_socket_dir }}"
        port: "{{ postgresql_port }}"
      register: postgresql_user_result
      loop:
        - {role: '{{ patroni_superuser_username }}', pass: '{{ patroni_superuser_password }}', role_attr: 'SUPERUSER'}
        - {role: '{{ patroni_replication_username }}', pass: '{{ patroni_replication_password }}', role_attr: 'LOGIN,REPLICATION'}
      loop_control:
        label: "{{ item.role }}"
      when: is_master == "true"

    - name: Update postgresql authentication in patroni.yml
      yedit:
        src: /etc/patroni/patroni.yml
        edits:
          - key: postgresql.authentication.replication.username
            value: "{{ patroni_replication_username }}"
          - key: postgresql.authentication.replication.password
            value: "{{ patroni_replication_password }}"
          - key: postgresql.authentication.superuser.username
            value: "{{ patroni_superuser_username }}"
          - key: postgresql.authentication.superuser.password
            value: "{{ patroni_superuser_password }}"
        state: present
      vars:
        ansible_python_interpreter: /usr/bin/python3
      when: hostvars[groups['master'][0]]['postgresql_user_result'] is changed
  when: patroni_cluster_bootstrap_method != "initdb" and
        (pgbackrest_install|bool or wal_g_install|bool) and
        (existing_pgcluster is not defined or not existing_pgcluster|bool)
  become: true
  become_user: postgres
  tags: patroni, point_in_time_recovery

- block:  # for add_pgnode.yml
    - name: Prepare PostgreSQL | fetch pg_hba.conf file from master
      run_once: true
      fetch:
        src: "{{ postgresql_conf_dir }}/pg_hba.conf"
        dest: files/pg_hba.conf
        validate_checksum: true
        flat: true
      delegate_to: "{{ groups.master[0] }}"

    - name: Prepare PostgreSQL | copy pg_hba.conf file to replica
      copy:
        src: files/pg_hba.conf
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640
  when: existing_pgcluster is defined and existing_pgcluster|bool
        and postgresql_conf_dir != postgresql_data_dir
  tags: patroni, pg_hba, pg_hba_generate

- block:  # start patroni on replica
    - name: Start patroni service on Replica servers
      systemd:
        daemon_reload: true
        name: patroni
        state: restarted
        enabled: true

    - name: Wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false

    - name: Check that the patroni is healthy on the replica server
      uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/health"
        status_code: 200
      register: replica_result
      until: replica_result.status == 200
      retries: 1200  # timeout 10 hours
      delay: 30
  when: is_master != "true"
  tags: patroni, patroni_start_replica, point_in_time_recovery

# create symlink pg_xlog/pg_wal to custom WAL dir
- import_tasks: custom_wal_dir.yml
  when: postgresql_wal_dir is defined and postgresql_wal_dir | length > 0
  tags: patroni, custom_wal_dir

# disable postgresql from autostart
- block:  # "Debian"
    - name: Turning off postgresql autostart from config "start.conf" (will be managed by patroni)
      copy:
        dest: "{{ postgresql_conf_dir }}/start.conf"
        content: "manual"
        owner: postgres
        group: postgres
        mode: 0644

    - name: Disable "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}" service
      systemd:
        name: "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}"
        enabled: false
        daemon_reload: true
  when: ansible_os_family == "Debian" and
        postgresql_packages|join(" ") is not search("postgrespro")
  tags: patroni, postgresql_disable

# "RedHat"
- name: Disable "postgresql-{{ postgresql_version }}" service (will be managed by patroni)
  systemd:
    name: "postgresql-{{ postgresql_version }}"
    enabled: false
    daemon_reload: true
  when: ansible_os_family == "RedHat" and
        postgresql_packages|join(" ") is not search("postgrespro")
  tags: patroni, postgresql_disable

# PostgresPro
- name: Disable "postgrespro-std-{{ postgresql_version }}" service (will be managed by patroni)
  systemd:
    name: "postgrespro-std-{{ postgresql_version }}"
    enabled: false
    daemon_reload: true
  when: postgresql_packages|join(" ") is search("postgrespro-std")
  tags: patroni, postgresql_disable

# PATRONICTL_CONFIG_FILE (patroni v1.6.1 and higher)
- name: Add PATRONICTL_CONFIG_FILE environment variable into /etc/environment
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^export PATRONICTL_CONFIG_FILE"
    line: "export PATRONICTL_CONFIG_FILE=/etc/patroni/patroni.yml"
    owner: root
    group: root
    mode: '0644'
  ignore_errors: true
  tags: patroni, patroni_env

...
