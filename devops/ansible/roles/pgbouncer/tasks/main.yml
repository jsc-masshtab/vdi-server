---
# yamllint disable rule:line-length

- name: Install pgbouncer package
  package:
    name: pgbouncer
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "Debian" or
        (ansible_os_family == "RedHat" and
        ansible_distribution_major_version == '7')
  tags: pgbouncer_install, pgbouncer

# RHEL 8
- name: Install pgbouncer package
  dnf:
    name: pgbouncer
    disablerepo: AppStream
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "RedHat" and
        ansible_distribution_major_version >= '8'
  tags: pgbouncer_install, pgbouncer

- name: Ensure config directory "{{ pgbouncer_conf_dir }}" exist
  file:
    path: "{{ pgbouncer_conf_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  tags: pgbouncer_conf, pgbouncer

- name: Stop and disable standard init script
  service:
    name: pgbouncer
    state: stopped
    enabled: false
  when: ansible_os_family == "Debian"
  tags: pgbouncer_service, pgbouncer

- name: Copy systemd service file
  template:
    src: templates/pgbouncer.service.j2
    dest: /etc/systemd/system/pgbouncer.service
    owner: postgres
    group: postgres
    mode: 0644
  notify: "restart pgbouncer"
  tags: pgbouncer_service, pgbouncer

- block:  # workaround for pgbouncer from postgrespro repo
    - name: Check that /usr/bin/pgbouncer is exists
      stat:
        path: /usr/bin/pgbouncer
      register: pgbouncer_bin

    - name: create a symlink to /usr/sbin/pgbouncer
      file:
        src: /usr/sbin/pgbouncer
        dest: /usr/bin/pgbouncer
        owner: root
        group: root
        state: link
      when: not pgbouncer_bin.stat.exists
  when: ansible_os_family == "RedHat" and
        postgresql_packages|join(" ") is search("postgrespro")
  tags: pgbouncer_service, pgbouncer

- name: Enable log rotation with logrotate
  copy:
    content: |
      /var/log/pgbouncer/pgbouncer.log {
             daily
             rotate 7
             copytruncate
             delaycompress
             compress
             notifempty
             missingok
             su root root
      }
    dest: /etc/logrotate.d/pgbouncer
  tags: pgbouncer_logrotate, pgbouncer

- name: Configure pgbouncer.ini
  template:
    src: templates/pgbouncer.ini.j2
    dest: "{{ pgbouncer_conf_dir }}/pgbouncer.ini"
    owner: postgres
    group: postgres
    mode: 0640
  notify: "restart pgbouncer"
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: pgbouncer_conf, pgbouncer

- name: Create userlist.txt
  template:
    src: templates/userlist.txt.j2
    dest: "{{ pgbouncer_conf_dir }}/userlist.txt"
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: pgbouncer

- block:  # for add_pgnode.yml
    - name: Fetch pgbouncer.ini and userlist.txt conf files from master
      run_once: true
      fetch:
        src: "{{ item }}"
        dest: files/
        validate_checksum: true
        flat: true
      loop:
        - /etc/pgbouncer/pgbouncer.ini
        - /etc/pgbouncer/userlist.txt
      delegate_to: "{{ groups.master[0] }}"

    - name: Copy pgbouncer.ini and userlist.txt conf files to replica
      copy:
        src: "files/{{ item }}"
        dest: /etc/pgbouncer/
        owner: postgres
        group: postgres
        mode: 0640
      loop:
        - pgbouncer.ini
        - userlist.txt

    - name: Prepare pgbouncer.ini conf file (replace "listen_addr")
      lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - {regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }}'}
      loop_control:
        label: "{{ item.line }}"
      notify: "restart pgbouncer"
      when: with_haproxy_load_balancing|bool or
            (cluster_vip is not defined or cluster_vip | length < 1)

    - name: Prepare pgbouncer.ini conf file (replace "listen_addr")
      lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - {regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }}'}
      loop_control:
        label: "{{ item.line }}"
      notify: "restart pgbouncer"
      when: not with_haproxy_load_balancing|bool and (cluster_vip is defined and cluster_vip | length > 0 )
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: pgbouncer_conf, pgbouncer

...
