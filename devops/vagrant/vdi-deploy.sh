#!/bin/bash
# pipenv lock --requirements > requirements.txt && sed -i '1s/^/# Autogenerated requirements file. For update use "pipenv lock --requirements > requirements.txt"\n/' requirements.txt
# debug - bash vdi-deploy.sh 2>error.log

ROOT_DIR=/opt/veil-vdi
LOG_DIR=/var/log/veil-vdi/

CONF_DIR=${ROOT_DIR}/devops/deb/vdi-backend/root/opt/veil-vdi/other
BACKEND_DIR=${ROOT_DIR}/app
TMP_FRONTEND_DIR=${ROOT_DIR}/frontend
WWW_DIR=${ROOT_DIR}/www
ENV_DIR=${ROOT_DIR}/env
OTHER_DIR=${ROOT_DIR}/other
SSL_DIR=${OTHER_DIR}/veil_ssl

# Настройка структуры приложения
# ------------------------------

# Создаем необходимые для работы каталоги
mkdir ${ROOT_DIR}
mkdir ${LOG_DIR}

mkdir ${OTHER_DIR}
mkdir ${BACKEND_DIR}
mkdir ${ENV_DIR}
mkdir ${SSL_DIR}
mkdir ${WWW_DIR}

# Переносим backend в app/
cp -r ${ROOT_DIR}/backend/* ${BACKEND_DIR}
echo "Permissions for vagrant..."
chown vagrant ${BACKEND_DIR} -R

# Экспорт переменной окружения для работы alembic
export PYTHONPATH=${BACKEND_DIR}

# Переходим в корень проекта
cd ${ROOT_DIR}

# Установка пакетов
# ------------------------------

# Обязательные пакеты
echo "Install base packages"
sed -i s/us\./ru\./g /etc/apt/sources.list
apt-get update -y
apt-get install -y postgresql-server-dev-9.6 python3-dev python3-setuptools python-dev gcc python3-pip postgresql logrotate libsasl2-dev libldap2-dev libssl-dev sudo curl apt-utils redis-server

# Дополнительные пакеты
apt-get install -y mc

# Пакеты которых нет на Astra Linux
echo "Installing additional packages"  # supervisor отсутствует в Astra Linux SE
apt-get install -y supervisor nginx

# Установка зависимостей backend
# ------------------------------

echo "Setting up env"
# Обновляем pip до последней версии
/usr/bin/python3 -m pip install -U pip
# Устанавливаем virtualenv
/usr/bin/python3 -m pip install 'virtualenv==15.1.0' --force-reinstall
# Создаем виртуальное окружение
/usr/bin/python3 -m virtualenv ${ENV_DIR}
# Устанавливаем зависимости
cd ${BACKEND_DIR}
${ENV_DIR}/bin/python -m pip install -r requirements.txt

# TODO: похоже, что этот шаг не обязателен
# Активируем виртуальное окружение
#source ${ENV_DIR}/bin/activate

# Генерация и подключение секретов
# ------------------------------

# Генерируем local_settings
echo "Executing local_settings.py"
cd ${BACKEND_DIR} && /opt/veil-vdi/env/bin/python create_local_settings.py
# Берем из файла ключи доступа к БД и Redis
DB_PASS="$(grep -r 'DB_PASS' local_settings.py | sed -r "s/DB_PASS = '(.+)'/\1/g")"
REDIS_PASS="$(grep -r 'REDIS_PASSWORD' local_settings.py | sed -r "s/REDIS_PASSWORD = '(.+)'/\1/g")"

# Настройка redis-server
echo "Setting up redis"
systemctl enable redis-server.service
# Подкладываем наш конфиг из conf
cp ${CONF_DIR}/vdi.redis /etc/redis/redis.conf
# Устанавливаем пароль для подключения
echo "requirepass ${REDIS_PASS}" | sudo tee -a /etc/redis/redis.conf
systemctl restart redis-server

# Настройка PostgreSQL
echo "Setting up database"
# Перекладываем наш конфиг из conf
cp ${CONF_DIR}/vdi.postgresql /etc/postgresql/9.6/main/postgresql.conf

# Создаем БД
echo "postgres:${DB_PASS}" | chpasswd
echo "Changing default db user pass"
sudo -u postgres psql -c "ALTER ROLE postgres PASSWORD '${DB_PASS}';"
# На астре нету бездуховной кодировки en_US.UTF-8. Есть C.UTF-8
echo "Creating db"
sudo -u postgres psql -c "create database vdi encoding 'utf8' lc_collate = 'en_US.UTF-8' lc_ctype = 'en_US.UTF-8' template template0;"

# Настройки только для vagrant-сборки
echo "Enable remote connections"
# Добавляем возможность подключения с удаленного сервера к БД внутри vagrant
sed -i 's/peer/trust/g' /etc/postgresql/9.6/main/pg_hba.conf
sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '0.0.0.0'/g" /etc/postgresql/9.6/main/postgresql.conf
echo 'host  vdi postgres  0.0.0.0/0  trust' >> /etc/postgresql/9.6/main/pg_hba.conf

# Применяем настройки
echo "Restarting postgresql"
systemctl restart postgresql

# Создаем требуемую схему таблиц в БД
# ------------------------------
echo "Apply database migrations"
cd ${BACKEND_DIR} && /opt/veil-vdi/env/bin/alembic upgrade head

# Настраиваем служебные сервисы
# ------------------------------

echo "Deploying configuration files for logrotate"
cp ${CONF_DIR}/tornado.logrotate /etc/logrotate.d/veil-vdi

echo "Deploying configuration files for supervisor"
cp ${CONF_DIR}/supervisord.conf /etc/supervisor/supervisord.conf
cp ${CONF_DIR}/tornado.supervisor ${OTHER_DIR}/tornado.supervisor
supervisorctl reload

echo "Vdi backend status:"
supervisorctl status

# Пакеты требующиеся только для сборки
# ------------------------------

# нужно только для компиляции Frontend
echo "Installing node v.10 && npm"
curl -sL https://deb.nodesource.com/setup_10.x | bash
apt-get install -y nodejs

# Компиляция Frontend
echo "Setting up frontend"
cd ${TMP_FRONTEND_DIR}
rm -rf node_modules/ dist/
npm install --unsafe-perm
npm run build -- --prod
cp -r ${TMP_FRONTEND_DIR}/dist/frontend/* ${WWW_DIR}/
echo "Frontend compiled to ${WWW_DIR}"
# Разрешаем доступ к каталогу www для nginx
gpasswd -a www-data vagrant
chmod g+x ${WWW_DIR}/
chown vagrant:vagrant ${WWW_DIR}/ -R

# Настраиваем nginx
# ------------------------------
echo "Setting up nginx"
# Перекладываем бесполезные ключи шифрования для работы 443 порта.
cp ${CONF_DIR}/veil_ssl/veil_default.crt ${SSL_DIR}/veil_default.crt
cp ${CONF_DIR}/veil_ssl/veil_default.key ${SSL_DIR}/veil_default.key

# Копируем нашу конфигурацию для nginx
cp ${CONF_DIR}/vdi.nginx /etc/nginx/conf.d/vdi_nginx.conf
# Удаляем дефолтную настройку сайтов nginx
rm /etc/nginx/sites-enabled/*
# Применяем настройки nginx
systemctl restart nginx

# Убираем следы установки
#------------------------------
echo "Removing temporary folders..."
rm -rf ${ROOT_DIR}/devops
rm -rf ${ROOT_DIR}/backend
rm -rf ${TMP_FRONTEND_DIR}

echo "All done. Directory tree:"
echo "Project root dir: ${ROOT_DIR}"
echo "backend/application dir: ${BACKEND_DIR}"
echo "static fronted dir: ${WWW_DIR}"
echo "additional dir (ssl, conf): ${OTHER_DIR}"
echo "env dir: ${ENV_DIR}"
